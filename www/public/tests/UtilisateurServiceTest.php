<?php
namespace Tests;

use App\Service\UtilisateurService;
use App\Entity\UtilisateurEntity;
use InvalidArgumentException;
use RuntimeException;

class UtilisateurServiceTest extends TestBase
{
    private $service;

    public function __construct()
    {
        $this->setUp();
        $this->service = new UtilisateurService();
    }

    public function runTests()
    {
        echo "\nüß™ TESTS DU SERVICE UTILISATEUR\n";
        echo str_repeat("=", 50) . "\n";

        $this->testCreerCompte();
        $this->testAuthentifier();
        $this->testValiderCompte();
        $this->testChangerTypeCompte();
        $this->testSignalerUtilisateur();
        $this->testBannirUtilisateur();
        $this->testFermerCompte();
        $this->testMettreAJourProfil();
        $this->testValidationDonnees();
    }

    private function testCreerCompte()
    {
        echo "\nüìù Test cr√©ation de compte:\n";

        // Test cr√©ation normale
        $utilisateur = $this->service->creerCompte(
            'nouveau@test.com',
            'password123',
            'NouveauUser'
        );

        $this->assert(
            $utilisateur instanceof UtilisateurEntity,
            "Cr√©ation d'un nouveau compte r√©ussie"
        );

        $this->assert(
            $utilisateur->getTypeCompte() === UtilisateurEntity::TYPE_REDACTEUR,
            "Type par d√©faut est r√©dacteur"
        );

        $this->assert(
            !$utilisateur->getEstBanni(),
            "Utilisateur non banni par d√©faut"
        );

        // Test email d√©j√† utilis√©
        $this->assertException(
            function () {
                $this->service->creerCompte(
                    'nouveau@test.com',
                    'password123',
                    'AutrePseudo'
                );
            },
            InvalidArgumentException::class,
            "Exception lev√©e pour email d√©j√† utilis√©"
        );

        // Test pseudonyme d√©j√† utilis√©
        $this->assertException(
            function () {
                $this->service->creerCompte(
                    'autre@test.com',
                    'password123',
                    'NouveauUser'
                );
            },
            InvalidArgumentException::class,
            "Exception lev√©e pour pseudonyme d√©j√† utilis√©"
        );
    }

    private function testAuthentifier()
    {
        echo "\nüîê Test authentification:\n";

        // Test authentification r√©ussie
        $utilisateur = $this->service->authentifier('admin@test.com', 'password123');

        $this->assert(
            $utilisateur instanceof UtilisateurEntity,
            "Authentification r√©ussie avec bons identifiants"
        );

        $this->assert(
            $utilisateur->getEmail() === 'admin@test.com',
            "Email correct r√©cup√©r√©"
        );

        // Test mauvais mot de passe
        $utilisateur = $this->service->authentifier('admin@test.com', 'mauvais_password');

        $this->assert(
            $utilisateur === null,
            "√âchec authentification avec mauvais mot de passe"
        );

        // Test email inexistant
        $utilisateur = $this->service->authentifier('inexistant@test.com', 'password123');

        $this->assert(
            $utilisateur === null,
            "√âchec authentification avec email inexistant"
        );

        // Test utilisateur banni
        $redacteur = $this->getTestUser('redacteur@test.com');
        $admin = $this->getTestUser('admin@test.com');
        $this->service->bannirUtilisateur($redacteur->getId(), $admin->getId(), "Test");

        $this->assertException(
            function () {
                $this->service->authentifier('redacteur@test.com', 'password123');
            },
            RuntimeException::class,
            "Exception lev√©e pour utilisateur banni"
        );
    }

    private function testValiderCompte()
    {
        echo "\n‚úÖ Test validation de compte:\n";

        $admin = $this->getTestUser('admin@test.com');
        $redacteur = $this->getTestUser('redacteur@test.com');

        // Test validation par admin
        $result = $this->service->validerCompte($redacteur->getId(), $admin->getId());

        $this->assert(
            $result === true,
            "Validation de compte par admin r√©ussie"
        );

        // Test validation par non-admin
        $moderateur = $this->getTestUser('moderateur@test.com');

        $this->assertException(
            function () use ($redacteur, $moderateur) {
                $this->service->validerCompte($redacteur->getId(), $moderateur->getId());
            },
            RuntimeException::class,
            "Exception lev√©e pour validation par non-admin"
        );
    }

    private function testChangerTypeCompte()
    {
        echo "\nüîÑ Test changement type de compte:\n";

        $admin = $this->getTestUser('admin@test.com');
        $redacteur = $this->getTestUser('redacteur@test.com');

        // Test changement par admin
        $result = $this->service->changerTypeCompte(
            $redacteur->getId(),
            UtilisateurEntity::TYPE_MODERATEUR,
            $admin->getId()
        );

        $this->assert(
            $result === true,
            "Changement type par admin r√©ussi"
        );

        // V√©rifier le changement
        $redacteurMaj = $this->utilisateurDAO->findById($redacteur->getId());
        $this->assert(
            $redacteurMaj->getTypeCompte() === UtilisateurEntity::TYPE_MODERATEUR,
            "Type de compte effectivement chang√©"
        );

        $this->service->changerTypeCompte(
            $redacteur->getId(),
            UtilisateurEntity::TYPE_REDACTEUR,
            $admin->getId()
        );
    }

    private function testSignalerUtilisateur()
    {
        echo "\nüö® Test signalement utilisateur:\n";

        $moderateur = $this->getTestUser('moderateur@test.com');
        $redacteur = $this->getTestUser('redacteur@test.com');

        // Test signalement par mod√©rateur
        $result = $this->service->signalerUtilisateur(
            $redacteur->getId(),
            $moderateur->getId(),
            "Comportement inappropri√©"
        );

        $this->assert(
            $result === true,
            "Signalement par mod√©rateur r√©ussi"
        );

        // Test signalement par non-mod√©rateur
        $this->assertException(
            function () use ($redacteur) {
                $this->service->signalerUtilisateur(
                    $redacteur->getId(),
                    $redacteur->getId(),
                    "Test"
                );
            },
            RuntimeException::class,
            "Exception lev√©e pour signalement par non-mod√©rateur"
        );
    }

    private function testBannirUtilisateur()
    {
        echo "\nüî® Test bannissement utilisateur:\n";

        $admin = $this->getTestUser('admin@test.com');
        $redacteur = $this->getTestUser('redacteur@test.com');

        // Test bannissement par admin
        $result = $this->service->bannirUtilisateur(
            $redacteur->getId(),
            $admin->getId(),
            "Violation des r√®gles"
        );

        $this->assert(
            $result === true,
            "Bannissement par admin r√©ussi"
        );

        // V√©rifier le bannissement
        $redacteurMaj = $this->utilisateurDAO->findById($redacteur->getId());
        $this->assert(
            $redacteurMaj->getEstBanni() === true,
            "Utilisateur effectivement banni"
        );
    }

    private function testFermerCompte()
    {
        echo "\nüóëÔ∏è Test fermeture de compte:\n";

        $redacteur = $this->getTestUser('redacteur@test.com');

        // Test fermeture sans suppression contenus
        $result = $this->service->fermerCompte($redacteur->getId(), false);

        $this->assert(
            $result === true,
            "Fermeture de compte sans suppression r√©ussie"
        );
    }

    private function testMettreAJourProfil()
    {
        echo "\nüìù Test mise √† jour profil:\n";

        $redacteur = $this->getTestUser('redacteur@test.com');

        // Test mise √† jour email
        $utilisateur = $this->service->mettreAJourProfil($redacteur->getId(), [
            'email' => 'nouveau_email@test.com'
        ]);

        $this->assert(
            $utilisateur->getEmail() === 'nouveau_email@test.com',
            "Mise √† jour email r√©ussie"
        );

        // Test email d√©j√† utilis√©
        $this->assertException(
            function () use ($redacteur) {
                $this->service->mettreAJourProfil($redacteur->getId(), [
                    'email' => 'admin@test.com'
                ]);
            },
            InvalidArgumentException::class,
            "Exception lev√©e pour email d√©j√† utilis√©"
        );
    }

    private function testValidationDonnees()
    {
        echo "\n‚úÖ Test validation des donn√©es:\n";

        // Test email invalide
        $this->assertException(
            function () {
                $this->service->creerCompte('email_invalide', 'password123', 'Test');
            },
            InvalidArgumentException::class,
            "Exception lev√©e pour email invalide"
        );

        // Test mot de passe trop court
        $this->assertException(
            function () {
                $this->service->creerCompte('test@example.com', '123', 'Test');
            },
            InvalidArgumentException::class,
            "Exception lev√©e pour mot de passe trop court"
        );

        // Test pseudonyme trop court
        $this->assertException(
            function () {
                $this->service->creerCompte('test@example.com', 'password123', 'AB');
            },
            InvalidArgumentException::class,
            "Exception lev√©e pour pseudonyme trop court"
        );
    }
}
