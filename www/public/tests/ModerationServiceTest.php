<?php
namespace Tests;

use App\Service\ModerationService;
use App\Service\ArticleService;
use App\Service\UtilisateurService;
use App\Entity\ArticleEntity;
use RuntimeException;
use InvalidArgumentException;

class ModerationServiceTest extends TestBase
{
    private $service;
    private $articleService;
    private $utilisateurService;

    public function __construct()
    {
        $this->setUp();
        $this->service = new ModerationService();
        $this->articleService = new ArticleService();
        $this->utilisateurService = new UtilisateurService();
    }

    public function runTests()
    {
        echo "\n‚öñÔ∏è TESTS DU SERVICE MOD√âRATION\n";
        echo str_repeat("=", 50) . "\n";

        $this->testGetHistoriqueModerations();
        $this->testGetActionsRecentes();
        $this->testGetHistoriqueArticle();
        $this->testGetStatistiquesModerations();
        $this->testGenererRapportPeriode();
        $this->testPermissionsAcces();
    }

    private function testGetHistoriqueModerations()
    {
        echo "\nüìã Test historique mod√©rations:\n";

        $moderateur = $this->getTestUser('moderateur@test.com');
        $admin = $this->getTestUser('admin@test.com');

        // Test acc√®s par mod√©rateur
        $historique = $this->service->getHistoriqueModerations($moderateur->getId());

        $this->assert(
            is_array($historique),
            "R√©cup√©ration historique par mod√©rateur r√©ussie"
        );

        // Test acc√®s par admin
        $historique = $this->service->getHistoriqueModerations($admin->getId());

        $this->assert(
            is_array($historique),
            "R√©cup√©ration historique par admin r√©ussie"
        );

        // Test acc√®s par r√©dacteur
        $redacteur = $this->getTestUser('redacteur@test.com');

        $this->assertException(
            function () use ($redacteur) {
                $this->service->getHistoriqueModerations($redacteur->getId());
            },
            RuntimeException::class,
            "Exception lev√©e pour acc√®s par r√©dacteur"
        );
    }

    private function testGetActionsRecentes()
    {
        echo "\nüïí Test actions r√©centes:\n";

        $moderateur = $this->getTestUser('moderateur@test.com');

        $actions = $this->service->getActionsRecentes($moderateur->getId(), 5);

        $this->assert(
            is_array($actions),
            "R√©cup√©ration actions r√©centes r√©ussie"
        );

        $this->assert(
            count($actions) <= 5,
            "Limite d'actions respect√©e"
        );
    }

    private function testGetHistoriqueArticle()
    {
        echo "\nüì∞ Test historique article:\n";

        $redacteur = $this->getTestUser('redacteur@test.com');
        $moderateur = $this->getTestUser('moderateur@test.com');

        // Cr√©er un article
        $article = $this->articleService->creerArticle(
            'Article pour historique',
            'Contenu test',
            ArticleEntity::VISIBILITE_PUBLIC,
            $redacteur->getId()
        );

        // Refuser l'article pour cr√©er un historique
        $this->articleService->modererArticle(
            $article->getId(),
            'refuser',
            $moderateur->getId(),
            'Test historique'
        );

        // R√©cup√©rer l'historique
        $historique = $this->service->getHistoriqueArticle(
            $article->getId(),
            $moderateur->getId()
        );

        $this->assert(
            is_array($historique),
            "R√©cup√©ration historique article r√©ussie"
        );
    }

    private function testGetStatistiquesModerations()
    {
        echo "\nüìä Test statistiques mod√©rations:\n";

        $admin = $this->getTestUser('admin@test.com');

        // Test acc√®s par admin
        $stats = $this->service->getStatistiquesModerations($admin->getId());

        $this->assert(
            is_array($stats),
            "R√©cup√©ration statistiques par admin r√©ussie"
        );

        $this->assert(
            isset($stats['refus_articles']),
            "Statistiques contiennent refus articles"
        );

        $this->assert(
            isset($stats['articles_en_attente']),
            "Statistiques contiennent articles en attente"
        );

        // Test acc√®s par non-admin
        $moderateur = $this->getTestUser('moderateur@test.com');

        $this->assertException(
            function () use ($moderateur) {
                $this->service->getStatistiquesModerations($moderateur->getId());
            },
            RuntimeException::class,
            "Exception lev√©e pour acc√®s statistiques par non-admin"
        );
    }

    private function testGenererRapportPeriode()
    {
        echo "\nüìÑ Test g√©n√©ration rapport p√©riode:\n";

        $admin = $this->getTestUser('admin@test.com');

        $dateDebut = '2025-01-01 00:00:00';
        $dateFin = '2025-12-31 23:59:59';

        // Test g√©n√©ration par admin
        $rapport = $this->service->genererRapportPeriode(
            $dateDebut,
            $dateFin,
            $admin->getId()
        );

        $this->assert(
            is_array($rapport),
            "G√©n√©ration rapport par admin r√©ussie"
        );

        $this->assert(
            isset($rapport['periode']),
            "Rapport contient informations p√©riode"
        );

        $this->assert(
            isset($rapport['resume']),
            "Rapport contient r√©sum√©"
        );

        // Test g√©n√©ration par non-admin
        $moderateur = $this->getTestUser('moderateur@test.com');

        $this->assertException(
            function () use ($dateDebut, $dateFin, $moderateur) {
                $this->service->genererRapportPeriode(
                    $dateDebut,
                    $dateFin,
                    $moderateur->getId()
                );
            },
            RuntimeException::class,
            "Exception lev√©e pour g√©n√©ration rapport par non-admin"
        );

        // Test format date invalide
        $this->assertException(
            function () use ($admin) {
                $this->service->genererRapportPeriode(
                    'date_invalide',
                    '2025-12-31 23:59:59',
                    $admin->getId()
                );
            },
            InvalidArgumentException::class,
            "Exception lev√©e pour format date invalide"
        );
    }

    private function testPermissionsAcces()
    {
        echo "\nüîê Test permissions d'acc√®s:\n";

        $redacteur = $this->getTestUser('redacteur@test.com');

        // Test acc√®s signalements par r√©dacteur
        $this->assertException(
            function () use ($redacteur) {
                $this->service->getSignalementsNonTraites($redacteur->getId());
            },
            RuntimeException::class,
            "Exception lev√©e pour acc√®s signalements par r√©dacteur"
        );

        // Test d√©tails mod√©ration par r√©dacteur
        $this->assertException(
            function () use ($redacteur) {
                $this->service->getModerationDetails($redacteur->getId());
            },
            RuntimeException::class,
            "Exception lev√©e pour acc√®s d√©tails par r√©dacteur"
        );
    }
}
